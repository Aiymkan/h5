import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import axios from "axios";


const initialState = {
  menu: [],
  loading: false,
  orders: [],
};

const baseURL= 'https://fir-2d535-default-rtdb.asia-southeast1.firebasedatabase.app'

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getMenu = createAsyncThunk(
  'menu/fetchMenu',
  async (amount) => {
    const response = await axios.get(baseURL + '/menu.json');
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const addOrder = createAsyncThunk(
  'order',
  async (data) => {
    const response = await axios.post(baseURL + '/order.json', data);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const menuSlice = createSlice({
  name: 'menu',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addToCartAction: (state, action) => {
      const isAlreadyIn = state.orders.filter(item => item.title === action.payload.title).length>0;
      if (isAlreadyIn) {
        const index = state.orders.findIndex(item => item.title=== action.payload.title);
        if (index > -1){
          state.orders[index].amount =state.orders[index].amount + 1;
        }
      } else {
        state.orders.push({
          ...action.payload,
          amount: 1,
        })
      }
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMenu.pending, (state) => {
        state.loading = true;
      })
      .addCase(getMenu.fulfilled, (state, action) => {
        state.loading = false;
        // const menuItems = Object.keys(action.payload).map(key=>{
        //   return{
        //     ...action.payload[key],
        //     id: key,
        //   }
        // });
        state.menu = action.payload;
      });
  },
});

export const { addToCartAction } = menuSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.menu.value)`
export const selectMenu = (state) => state.menu.menu;
export const selectOrders = (state) => state.menu.orders;



export default menuSlice.reducer;
